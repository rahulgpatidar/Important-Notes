Selenium- jason Huggins - Thoghtwork - 2004
WebDriver- Simon Stewart- Google - 2006
Selenium WebDriver - 2008

Selenium - have 4 flavour/tool- IDE, RC, WebDriver, Grid

Because of the Javascript injection to the browser and because of security reason(each every command goes through Server) RC is depricated officially, most of the browser are not allowning JS injection to their sites, So Webdriver came into picture.

Perhaps the best explanation for why WebDriver and Selenium are merging was detailed by Simon Stewart, the creator of WebDriver, in a joint email to the WebDriver and Selenium community on August 6, 2009.

Selenium RC - API

Selenium WebDriver - API,well-designed object-oriented API ,Selenium-WebDriver makes direct calls to the browser using each browser’s native support for automation. Again, it drives the browser directly using the browser’s built in support for automation.

Selenium 2(WebDriver) still runs Selenium 1’s( Selenium RC) interface for backwards compatibility.

Selenium IDE (Integrated Development Environment) is a prototyping tool for building test scripts. It is a Firefox and Chrome plugin and provides an easy-to-use interface for developing automated tests. Selenium IDE has a recording feature, which records user actions as they are performed and then exports them as a reusable script in one of many programming languages that can be later executed. Selenese is the language to write code in IDE.

Note : Even though Selenium IDE has a “Save” feature that allows users to keep the tests in a table-based format for later import and execution, it is not designed to run your test passes nor is it designed to build all the automated tests you will need. Specifically, Selenium IDE doesn’t provide iteration or conditional statements for test scripts

Selenium Grid- Selenium Grid allows you to run your tests in parallel, that is, different tests can be run at the same time on different remote machines. Improve the Performance and reduce the Time for execution.

WebDriver and the Selenium-Server
You may, or may not, need the Selenium Server, depending on how you intend to use Selenium-WebDriver. If your browser and tests will all run on the same machine, and your tests only use the WebDriver API, then you do not need to run the Selenium-Server; WebDriver will run the browser directly.

There are some reasons though to use the Selenium-Server with Selenium-WebDriver.

You are using Selenium-Grid to distribute your tests over multiple machines or virtual machines (VMs).
You want to connect to a remote machine that has a particular browser version that is not on your current machine.
You are not using the Java bindings (i.e. Python, C#, or Ruby) and would like to use HtmlUnit Driver


HtmlUnit Driver
This is currently the fastest and most lightweight implementation of WebDriver. As the name suggests, this is based on HtmlUnit. HtmlUnit is a java based implementation of a WebBrowser without a GUI. For any language binding (other than java) the Selenium Server is required to use this driver.


WARNING: Do not mix implicit and explicit waits. Doing so can cause unpredictable wait times. For example setting an implicit wait of 10 seconds and an explicit wait of 15 seconds, could cause a timeout to occur after 20 seconds.WebDriverWait by default calls the ExpectedCondition every 500 milliseconds until it returns successfully. A successful return value for the ExpectedCondition function type is a Boolean value of true, or a non-null object.

Implicit Waits
An implicit wait is to tell WebDriver to poll the DOM for a certain amount of time when trying to find an element or elements if they are not immediately available. The default setting is 0. Once set, the implicit wait is set for the life of the WebDriver object instance.

in selenium client library-everything is availble in the form of API(alert api, sendkey api, get api,navigate api..etc)

calling will happen thorugh -REST web services-: call-GET/POST/DELETE

will write our code in java/ruby/c#..in eclipse (internally all the commands are available in the form of APIs)- will send all the request throgh JSON wire protocol over HTTP client - this JSON will send request to server(chrome server/gecho/ie server)- this will send to real browser- and if request is valid it will respond with 200 OK and if request in not valid it will send another responce like 400/500(error code) something and this will go to the server driver-JSON-eclipse and it will convert to readable message in console.

Selenium send request(API) to browser in the form of JSON payload 

API (Application programing interface)-everything will available in the form of JARs(Like- selenium jars/Aapche POI jars/Cucumber jars)-so what exactly will do will use these jars will import these jars in our system and will use (will call thier methods and use)
ex- Calculator- will use sum/division methods -by importing thier jars
one system will interact with other with JSON/XML (suppose one is written in JAVA and other is in C#, so they dont undersatnd each other tht is why JSON comes into the picture)
Open source api- Selenium/Apache poi- we can take the source code and also we can change and create our own APIs
Licenced API- we can use only but not change

Window- licenced
Linux-open source- we can create LINUX

Webservices- will call APIs but over the internet (in the form of JSON)- will send the request in the form of JSON (will enter in the UI but internally it will convert into JSON format) -request will go throgh network and send responce (in the form of JSON)   

Selenium-open source automation tool
Support OS- window,linux,IOS (multiple platform)
Support Language -java,python,ruby,c#,pearl (multiple language)
Support Browser-IE,Firefox,chrrome,safari,opera,Android etc (multiple browser)
it is for web based application (browser)only.
In whatever language website is written, we can write our code in any language it will not matter.
RC-there is no direct interaction b/w code and website for this we need a proxy server (RC),
IDE - Code is written in SELENESE command -these command will go to server and then it will talk to website (biggest disadvantage)
Selenium 1.0-RC - this is official not available now. Means whatever will selenium team will upgrade they will change on WebDriver only.
Selenium 2.0-webdriver (no proxy server b/w application under test and editor)
Talk with the browser native language (code and web application will talk with browser native language-whatever browser we will use it will talk on that language only).
WebDriver talks to website (Application) to their native (own) language
There is no proxy server b/w code and web application.
Internet explorer native Lang (written in)-C#
Firefox written in -Java
RC uses only java to trigger the event for automation.
There are no of websites which are not allow java to perform any events on their application
For RC we need to start from CMD (Command prompt) (it will take time for all the time)

JAVA in your machine should installed.
Editor-Eclipse (Eclipse download)-Eclipse IDE for java EE developer
If you don’t have java it will give error while you will try to open.
32 bit java-32 bit eclipse
64 bit java-64 bit eclipse
Compatibility should match otherwise will give error when will open eclipse.

Selenium downloading-means download just JAR file-whoever is developing a selenium they have written 1000s of code and put in JAR.
All java file convert to class file (compilation)
That actually execute
Will give class file to client

Jar file-combination of many class file
Each and very Jar files have no of class files

How jar made..?
Select the folder-export -java-java jar

We need to import JAR in our project.
Everything is assembled here for working on selenium-Eclipse+Jar import

There is not eclipse only there are other editor also available intellij idea.
Eclipse-user friendly.

We are configuring selenium but not downloading.

Set enviorvent variable-computer>properties>advance system setting> environment variable>path
(For IE)

Interface- A java interface defines a set of methods but does not implement it .A class that implements the interface agrees to implement all the methods defined in the interface
Web driver is the interface.

All Known Implementing Classes:
ChromeDriver, EdgeDriver, EventFiringWebDriver, FirefoxDriver, InternetExplorerDriver, OperaDriver, RemoteWebDriv
These are the classes will talk with the web application on their native language respectively.

Create an object
WebDriver driver=new FirefoxDriver ();
new is a keyword which allocate a memory for the class
driver is a reference and with the help of this ref will call all the methods of web driver interface.


Selenium+firefox=together develop WebDriver
Chrome and IE-3rd party vendor
There is one more layer b/w WebDriver and IE/chrome-we need to execute that layer to talk to browser (invoke .exe file)
system.setproperty(key,value)
Selenium WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a well-designed object-oriented API that provides improved support for modern advanced web-app testing problems.
WebDriver and the Selenium Server-
You may, or may not, need the Selenium Server, depending on how you intend to use Selenium-WebDriver. If your browser and tests will all run on the same machine, and your tests only use the WebDriver API, then you do not need to run the Selenium-Server; WebDriver will run the browser directly.
There are some reasons though to use the Selenium-Server with Selenium-WebDriver.
You are using Selenium-Grid to distribute your tests over multiple machines or virtual machines (VMs).
You want to connect to a remote machine that has a particular browser version that is not on your current machine.
You are not using the Java bindings (i.e. Python, C#, or Ruby) and would like to use HtmlUnit Driver
Fetching a Page
Dependent on several factors, including the OS/Browser combination, WebDriver may or may not wait for the page to load. In some circumstances, WebDriver may return control before the page has finished, or even started, loading. To ensure robustness, you need to wait for the element(s) to exist in the page using Explicit and Implicit Waits.

Beware that not all browsers were created equal, some CSS that might work in one version may not work in another.
User Input - Filling In Forms
We’ve already seen how to enter text into a text area or text field, but what about the other elements? You can “toggle” the state of checkboxes, and you can use “click” to set something like an OPTION tag selected. Dealing with SELECT tags isn’t too bad:
WebElement select = driver.findElement(By.tagName("select"));
List<WebElement> allOptions = select.findElements(By.tagName("option"));
for (WebElement option : allOptions) {
    System.out.println(String.format("Value is: %s", option.getAttribute("value")));
    option.click();
}

This will find the first “SELECT” element on the page, and cycle through each of its OPTIONs in turn, printing out their values, and selecting each in turn. As you will notice, this isn’t the most efficient way of dealing with SELECT elements. WebDriver’s support classes include one called “Select”, which provides useful methods for interacting with these.

Select select = new Select(driver.findElement(By.tagName("select")));
select.deselectAll();
select.selectByVisibleText("Edam");
This will deselect all OPTIONs from the first SELECT on the page, and then select the OPTION with the displayed text of “Edam”.
To reiterate: “navigate().to()” and “get()” do exactly the same thing. One’s just a lot easier to type than the other!
The “navigate” interface also exposes the ability to move backwards and forwards in your browser’s history:
driver.navigate().forward();
driver.navigate().back();
every object(link/button/text/text field...) have a address in the web page-by this address will find our object in the web page.
some properties are dynamic-than we have to go by other properties
if ID-alphanumeric so 90% it will change when page will refresh
if ID s varing -xpath will also vary and if there  is no other option than we will create our own xpath.
to identify a element -Tool used-firebug
firebug-is addon only for firefox 
if suppose one applicatoin is only working on chrome than..how to locate?
ans-right click -inpect element-click
own xpath
in IE-F12(develooper tool will open)

if ID,name,class-select based on their UNIQNESS
and if id is changing dynamicaally-will go by own customised, xpath
//tagname[@attibute='value']
//*[@attirbute='value']
ex.-<input id="email" class="inputtext" type="email" tabindex="1" value="" name="email"/>
//input[@type='email']

why CSS.?
10 times faster than xpath
class under the class can be identifie using CSS only.
lightweight
tagname[attirbute='value']
[attirbute='value']
#id
.classname(if space b/w to word than remove space with dot- aaaa bbb-  .aaa.bbb)
to make sure locator technique is correct or not-before running-copy the address-come to firefox-select css/xpath-enter-blue highted is coming-means correct

1.verify in firefox before running it-will save time
2.faster
3. pick up unique attribute when u r writing own CSS
most of the time class name will not be unique.


how to handle dropdown..?
with the help of Select class-by passing the argument of dropdow address
mehods- 
select by index()
select by value()
select by visibletext()

how to handle pop-up..?
we need to switch from driver to alert class
Alert al=driver.switchTo().alert()
al.accept();
al.dismiss();

if suppose both the radio button(more than object) have same property(we are not going with id than..)-will go by own xpath

How to do mouse movement..like-right click,write in capital letter,move mouse(mouse over)
Action class can handle-DragAndDrop , Caps lock  , Double click, right click, mouse over

driver can handle one window at a time.
if after clicking any object element new window is opening than driver can not handle new window for that we need to switch to other one

if there is ui/li tag-there is chance to fail of our test cases by normal way- go with CSS selector

Frames-kind of HTML document which are embeded on other HTML document
page on the page
ex-news website-where news will update every 5 min/somthinf-those are frames(breaking news section)-without reloading full page,developer work on particaular section only.
something dynamic in the page for that developer write separete HTML document and embeded on other HTML document
selenium can't directly identify elemnt on HTML page

If our locating technique is correct but still getting error unable to locate element-means most probably it will treated to Frame
 either iFrame/Frameset-if it is iFrame id will be given but for framset we need to search in frameset itself
<HTML>
<HEAD>
<TITLE>Welcome to HDFC Bank NetBanking</TITLE>
<script language="javascript">
	var daemon			= 'NETBANKING';
	var p_remoteaddress	= '';
	var RsaAuthReq		= '';
	
	var l_path = window.location.pathname;

	if(l_path == undefined || l_path == '' || l_path.indexOf("/netbanking") < 0){
		window.location.href = window.location.protocol + "//" + window.location.host +"/netbanking";
	}

</script>
</HEAD>
	<FRAMESET border="false" frameBorder="O" frameSpacing="0" rows="*" cols="*">
		<FRAMESET border="false" frameBorder="O" frameSpacing="0" rows="*,30" cols="*">
			<FRAME marginwidth="0" marginheight="0" NAME="login_page" SRC="RSLogin.html?v=7" NORESIZE="true" scrolling="yes"/>
			<FRAME marginwidth="0" marginheight="0" NAME="footer" SRC="footer.html" NORESIZE="true" scrolling="no"/>
		</FRAMESET>
	</FRAMESET>
</HTML>

how to handle multiple window..?
webdriver can understand only parent window
if othwr window is open than you need to write switch to window for that command is--  driver.switchTo.window(pass the parameter of ID of the window)
how to get ID of new window..?
driver.getwindowhanndles()- which will give all the window and their IDs-thowrh them into set/list data structure-and if you want to go into secind window tvaverse into new window and grab it
take ID and put it in on switchTo.window(here)..after that you hvae to perform operation and come back to the parent window for that same swtichTo.indow(parent id)

Frames- by.tagname(iFrame), by .tagname(Frameset) u will get the size


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
When you are working with Chrome Browser or IE browser you need to set the property(OR you can set in Enviorment Variable but upto the folder name only) otherwise will get illegalStateException

public static void main(String[] args) {
		System.setProperty("webdriver.chrome.driver", "E:\\Selenium_Driver\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.ebay.in/");
	}
--------------------------------------------------------------------------------------------------------------------------------------------

When you are working with IE Browser you need to set property (OR you can set in Enviorment Variable but upto the folder name only) otherwise will get illegalStateException

public static void main(String[] args) {
		System.setProperty("webdriver.ie.driver", "E:\\IEDriverServer.exe");
		WebDriver driver=new InternetExplorerDriver();
		driver.get("https://www.ebay.in/");
	}

and when working with IE browser - 
-Zoom level should be=100%  else SessionNotFoundException will appear	
-Protected mode settings should be same for all -otherwise SessionNotFoundException will appear	
-xpath changes in IE (there is no xpath engine is available)
-sendkeys performance (64 bit version is worst for IE dont use- it will type character very very slow-sendkeys perfomace will worst for it)

for the geckodriver also we need to set the property like IE and chrome (working with selenium 3 - than we need gecko driver else not needed)
--------------------------------------------------------------------------------------------------------------------------------------------

how to solve not connected exception- only will get in Firefox (stable -means properly tested and 2nd is Beta-still testing is going)
for avoid this issue-
-use selenium latest JARS
-use Firefox stable version

--------------------------------------------------------------------------------------------------------------------------------------------
whenever website is Dynamic- go with dynamic XPATH or CSS

diffrence b/w CSS and XPATH
-CSS is faster and the reason is in XPATH-XPATH engine is evaluate your XPATH and locate element but CSS does not have any engine and it direclty identify an object
-CSS will not change with Browser but XPATH may change in IE
--------------------------------------------------------------------------------------------------------------------------------------------
how can we find CSS
1.  tagname[attribute='value']
2.  tagname[attribute='value'][attribute2='value2']
3.  #id
4.  .classname   -if spaces is present in classname than remove those spaces and give dot on that places

while working with dynamic element
example-
id=customer365User
next time
id=customer324User

startwith and endwith plays very important role
5.  input[id^='customer'][name='log'] 	- startwith example
6.  input[id$='Login']			- endwith example
7.  input[id*='Email']			- contains example


--------------------------------------------------------------------------------------------------------------------------------------------
how to write XPATH

Absolute xpath = complete address of that particular element from parent node to child node - Not Recommended -Performance issue,not reliable,can be change any time
example - div/table/tbody/tr/td/a

Relative xpath =Can start from anywhere in the DOM

//div[@class='dropdown']//button[@type='button' and @class='btn btn-secondary dropdown-toggle' and @id='dropdownMenuButton']


++parent & preceding-sibling:

//a[text()='test2 test2']//parent::td[@class='datalistrow']//preceding-sibling::td[@class='datalistrow']//input[@name='contact_id']



1.Using single attribute

// tagname[@attribute=’value1’]

Example

// a [@href=’http://www.google.com’]

//input[@id=’name’ OR @class='abc']

//input[@name=’username’ AND @class='abc']

//img[@alt=’sometext’]


2.Using multiple attribute

//tagname[@attribute1=’value1’][attribute2=’value2’]

//a[@id=’id1’][@name=’namevalue1’]

//img[@src=’’][@href=’’]


3.Using contains method

//tagname[contains(@attribute,’value1’)]

//input[contains(@id,’’)]

//input[contains(@name,’’)]

//a[contains(@href,’’)][text()='abc']

//img[contains(@src,’’)]

//div[contains(@id,’’)]


4.Using starts-with method

//tagname[starts-with(@attribute-name,’’)]

//id[starts-with(@id,’’)]

//a[starts-with(@href=’’)]

//img[starts-with(@src=’’)]

//div[starts-with(@id=’’)]

//input[starts-with(@id=’’)]

//button[starts-with(@id,’’)]


5.Using Following node

Xpath/following::again-ur-regular-path

//input[@id=’’]/following::input[1]

//a[@href=’’]/following::a[1]

//img[@src=’’]/following::img[1]


6. Using preceding node

Xpath/preceding::again-ur-regular-path

//input[@id=’’]/ preceding::input[1]

//a[@href=’’]/ preceding::a[1]

//img[@src=’’]/ preceding::img[1]


7. Absolute XPath method
/html/head/body/div/input

8. Relative and Absolute XPath method

//parent-xpath/absolute xpath

//input[@id=’section’]/div/input
--------------------------------------------------------------------------------------------------------------------------------------------

If 1 XPATH matches with 2 or more than 2 node it will always perform operation on 1st matching node only
--------------------------------------------------------------------------------------------------------------------------------------------

when dealing with Bootstrap Login/popup/window  (Flipcart login or redbus login etc)- remember most of the time window will come under Frame so 1st we need to switch to Frame and than we can perform operations and if it is normal window than we can directly perform operations.

after switching ,it is now a separate window /alert-you can directly perform any operations

public static void main(String[] args) throws Exception {
		WebDriver driver = new FirefoxDriver();
		driver.get("https://www.goibibo.com/");
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		driver.findElement(By.xpath(".//*[@id='get_sign_up']")).click();
		driver.switchTo().frame("authiframe");
		driver.findElement(By.xpath(".//*[@id='authMobile']")).sendKeys("99999999999");
	}
--------------------------------------------------------------------------------------------------------------------------------------------
Bootsrape Droqdown- The bootstrap dropdown is enhanced part of dropdown where you will deal with UL and LI tag of HTML.
To handle this kind of drop-down we have to use findElements method and then we can run a for loop to get specific elements.

public static void main(String[] args) throws Exception {
		WebDriver driver = new FirefoxDriver();
		driver.get("https://www.ebay.in/");
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		driver.findElement(By.xpath(".//*[@id='gh-shop-a']")).click();
		List<WebElement> dd_menu=driver.findElements(By.xpath(".//*[@id='gh-sbc']/tbody/tr/td/ul/li/a"));
		System.out.println(dd_menu.size());
		System.out.println("----------------------------------------");
		for (int i = 0; i < dd_menu.size(); i++) {
			WebElement element=dd_menu.get(i);
			String innerHTML=element.getAttribute("innerHTML");
			if (innerHTML.contentEquals("Digital Cameras")) {
				element.click();
				break;
			}
			System.out.println(innerHTML);
		}
		
	}
--------------------------------------------------------------------------------------------------------------------------------------------
Dropdown- print all the values from dropdown

WebElement element = driver.findElement(By.xpath(".//*[@id='gh-cat']"));
		Thread.sleep(2000);
		Select select = new Select(element);
		List<WebElement> list = select.getOptions();
		System.out.println(list.size());
		System.out.println("-------------------------------------------");
		for (int i = 0; i < list.size(); i++) {
				System.out.println(list.get(i).getText());
		}

--------------------------------------------------------------------------------------------------------------------------------------------
Alert - Alert is an Interface
will use switchTo() method for- Alert/Frame/windowHandle

Note– alert is separate window so before using accept() or dismiss() methods we have to switch to alert window using switchTo() method

Example:-

        driver.findElement(By.xpath(".//*[@id='Table_3']/tbody/tr[1]/td[2]/div/a")).click();
        // Switch to alert window and capture the text and print
        System.out.println(driver.switchTo().alert().getText());
        // Pause testcase for 5 second
          Thread.sleep(5000);
        // click on ok button
 	driver.switchTo().alert().accept();
        // Close browser 
        driver.quit();
    }
---------------------------------------------------------

Now consider a scenario where alert window comes when certain condition true for this we can create method which will check if alert window present then only it will execute otherwise it will skip this part

public static void handleAlert(WebDriver ldriver){
 
           if(isAlertPresent(ldriver)){
 
           Alert alert = ldriver.switchTo().alert();
 
           System.out.println(alert.getText());
 
           alert.accept();
 
           }
 
           }
 
 
Important point- If alert in not present in the window and still we try to switchTo alert window then Selenium will throw NoAlertPresentException which will terminate your program so better you should use exception handle also in your script.
 
          public static boolean isAlertPresent(WebDriver ldriver){
 
                   try{
 
                   ldriver.switchTo().alert();
 
                   return true;
 
                   }catch(NoAlertPresentException ex){
 
                   return false;
 
                   }
 
                   }
--------------------------------------------------------------------------------------------------------------------------------------------

Mouse hover- print all the links 

WebElement element=driver.findElement(By.xpath(".//*[@id='nav-link-accountList']"));
		Actions act=new Actions(driver);
		act.moveToElement(element).build().perform();

		//XPATH is very very important for this type of problem

		List<WebElement>links=driver.findElements(By.xpath(".//*[@id='nav-flyout-accountList']//a"));
		for (int i = 0; i < links.size(); i++) {
			System.out.println(links.get(i).getText());
		}
		
--------------------------------------------------------------------------------------------------------------------------------------------

Element is not Clickable Exception-
-Mostly will get in Chrome and in Safari browser
-Try with diffrent XPATH
-mouse hover (best solution- click on middle of the element)
--------------------------------------------------------------------------------------------------------------------------------------------

Frames-
By default selenium will focus on parent window
-you need to perform any operation on Frame than you need to swtchTo that frame first and come back to parent window

how to identify Frames ?
ans- Source code (tagname : iframe/ frameset)

3 ways to switch to frame-index/id/webelement
if we dont have any id to find iframe- than so many attibute will be there to find (you will get iframe id or attribute in HTML tag)
in Mozilla- you can directly check there is frame or not but in Chrome/IE you need to find manually

how to handle ?
ans- switch to frame-perform operation-switch back to parent window

how to find no of frames ?
ans-driver.findelements(By.tagname("iframe")).size();


driver.switchTo().frame(indexnumber);
driver.switchTo().frame(“framename”);

driver.switchTo().defaultContent();


now if you want to find with the help of webelement

 try {
 
WebElement button=driver.findElement(By.xpath(""));  
 
driver.switchTo().frame(button);
 
}
catch (NoSuchFrameException e)
     {          
System.out.println(e.getMessage());     
 
     }

example-:

	int total_frame=driver.findElements(By.tagName("iframe")).size();	
	System.out.println(total_frame);
	WebElement my_frame=driver.findElement(By.xpath("//iframe[@title='selenium_news']"));
	driver.switchTo().frame(my_frame);

perform operation on frame now and than come back to parent window
driver.switchTo().defaultContent();
--------------------------------------------------------------------------------------------------------------------------------------------
How to Scroll into view in Selenium Webdriver ?
ans- Selenium does not have inbuilt method which allow us to scroll into view but We can scroll into view in Selenium using JavaScript executor.


public static void main(String[] args) {
		// Start browser
		WebDriver driver = new FirefoxDriver();
		// Maximize browser
		driver.manage().window().maximize();
		// Pass application URL
		driver.get("http://manos.malihu.gr/repository/custom-scrollbar/demo/examples/complete_examples.html");

		// Create instance of Javascript executor
		JavascriptExecutor je = (JavascriptExecutor) driver;

		// Identify the WebElement which will appear after scrolling down
		WebElement element = driver.findElement(By.xpath(".//*[@id='mCSB_3_container']/p[3]"));

		// now execute query which actually will scroll until that element is not appeared on page.
		je.executeScript("arguments[0].scrollIntoView(true);", element);

		// Extract the text and verify
		System.out.println(element.getText());

	}


What is JavaScript

JavaScript is one of the programming languages of the Web.

JavascriptExecutor is an Interface which is available in package org.openqa.selenium.JavascriptExecutor;

Inside this Interface we have some predefined method called executeScript()- so whatever script you will pass as a String  It will be executed by JavascriptExecutor.
Note- This is the most common question in the interview that how to type in Selenium without using the sendKeys method.


Program 1- How to type in Selenium without using sendKeys() method

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxDriver;

public class TestFirefox {

public static void main(String[] args) throws InterruptedException {

// Open Firefox browser
FirefoxDriver driver=new FirefoxDriver();

// Maximize the window
driver.manage().window().maximize();

// Open applicatiion
driver.get("enter your application URL");

// This will execute JavaScript in your script
((JavascriptExecutor)driver).executeScript("document.getElementById('some id').value='mukesh';");

}

}


Program 2- How to click in Selenium if button or radio button is disable
package seleniumday1;
 
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxDriver;
 
public class TestFirefox {
 
public static void main(String[] args) throws InterruptedException {
 
// Open Firefox browser
FirefoxDriver driver=new FirefoxDriver();
 
// Maximize the window
driver.manage().window().maximize();
 
// Open applicatiion
driver.get("enter your application URL");
 
// This will execute JavaScript in your script
((JavascriptExecutor)driver).executeScript("document.getElementById('enter your element id').click();");
 
}
 
}



Program 3- How to uncheck checkbox in Selenium if checkbox is disable

package seleniumday1;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxDriver;

public class TestFirefox {

public static void main(String[] args) throws InterruptedException {

// Open Firefox browser
FirefoxDriver driver=new FirefoxDriver();

// Maximize the window
driver.manage().window().maximize();

// Open applicatiion
driver.get("enter your application URL");

// This will execute JavaScript in your script
((JavascriptExecutor)driver).executeScript("document.getElementById('enter element id').checked=false;");
}

}

--------------------------------------------------------------------------------------------------------------------------------------------
How to Scroll Page in Selenium Webdriver using Java Script ?

Selenium handle scrolling page automatically but if want to scroll page using Selenium then yes we can do easily using JavaScript.

We have method scroll(horizontal, vertical) i.e. scroll(0,400)
Note- scroll method is not a method of Webdriver, this is a method of JavaScript.

public static void main(String[] args) throws Exception {
  
 // load browser
  WebDriver driver=new FirefoxDriver();
 
 
 // maximize browser
  driver.manage().window().maximize();
 
 
  // Open Application
  driver.get("http://jqueryui.com");
  
 
 // This  will scroll page 400 pixel vertical
  ((JavascriptExecutor)driver).executeScript("scroll(0,400)");
  
     
 }
--------------------------------------------------------------------------------------------------------------------------------------------

How to highlight elements Selenium Webdriver using JavaScript ?

public class aa {
 
 
public static void main(String []args){
 
 
WebDriver driver=new FirefoxDriver();
 
driver.manage().window().maximize();
 
driver.get("http://www.facebook.com");
 
 
// Inspect element
WebElement username= driver.findElement(By.id("email")); 
 
// Call reuse method
highLightElement(driver,username);
 
}
 
// Element highlighter code
public static void highLightElement(WebDriver driver, WebElement element)
{
JavascriptExecutor js=(JavascriptExecutor)driver; 
 
js.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", element);
 
try 
{
Thread.sleep(1000);
} 
catch (InterruptedException e) {
 
System.out.println(e.getMessage());
} 
 
js.executeScript("arguments[0].setAttribute('style','border: solid 2px white');", element); 
 
}
 }
--------------------------------------------------------------------------------------------------------------------------------------------
Robot class is not part of Selenium it comes with Java but we can use the same here.We have to use some keyboard event to perform this.
Step 1- We have to copy the file location in system clipboard.
Step 2- We have to click on upload button and use CTR+V and ENTER.
Note- Robot class each key has to press and release respectively


public static void main(String[] args) throws Exception {

		// Start browser
		WebDriver driver = new FirefoxDriver();

		// maximize browser
		driver.manage().window().maximize();

		// Specify the file location with extension
		StringSelection sel = new StringSelection("C:\\Users\\rahul goru\\Desktop\\TestNG.docx");

		// Copy to clipboard
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
		System.out.println("selection" + sel);

		// Open Monster.com
		driver.get("http://my.monsterindia.com/create_account.html");
		Thread.sleep(2000);
		// This will scroll down the page
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("scroll(0,350)");

		// Wait for 5 seconds
		Thread.sleep(5000);

		// This will click on Browse button
		driver.findElement(By.id("wordresume")).click();

		System.out.println("Browse button clicked");

		// Create object of Robot class
		Robot robot = new Robot();
		Thread.sleep(1000);
		// Press Enter
		robot.keyPress(KeyEvent.VK_ENTER);

		// Release Enter
		robot.keyRelease(KeyEvent.VK_ENTER);

		// Press CTRL+V
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_V);

		// Release CTRL+V
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_V);
		Thread.sleep(1000);
		System.out.println("-------------");
		// Press Enter 
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		System.out.println("-----------------------------------------------");
	}


--------------------------------------------------------------------------------------------------------------------------------------------

Program to handle calendar in Selenium Webdriver

public static void main(String[] args) {
		WebDriver driver = new FirefoxDriver();

		driver.get("http://seleniumpractise.blogspot.in/2016/08/how-to-handle-calendar-in-selenium.html");

		driver.findElement(By.id("datepicker")).click();

		List<WebElement> allDates = driver.findElements(By
				.xpath("//table[@class='ui-datepicker-calendar']//td"));

		for (WebElement ele : allDates) {

			String date = ele.getText();

			if (date.equalsIgnoreCase("28")) {
				ele.click();
				break;
			}

		}

	}
--------------------------------------------------------------------------------------------------------------------------------------------

Handle Dynamic Search Using Dynamic XPath - Google Search:

Steps:
1. Google Search – pick a value from suggestions
2. Search using Xpath
3. Get the total count of suggestions
4. Use if condition to match the value
5. Click on matched value

double slace (//) - means total number of child elements
descendant - number of childs(child of child, child of child....)

//ul[@role='rolelist']//li/descendant::div[text()='testing'] - return the list than iterate using for loop


How to handle dynamic WebTable In Selenium

There are two ways of handling WebTable:

Method – 1:
• Iterate row and column and get the cell value. 
• Using for loop
• Get total rows and iterate table
• Put if(string matches) then select the respective checkbox
• Lengthy method

Method – 2:
• Using custom XPath 
• Using parent and preceding-sibling tags
• No need to write for loop
• No full iteration of table
• Single line statement
• More dynamic
• Efficient and fast

Steps to handle calendar in Selenium Webdriver:
 1- Click on calendar
 2- Get all td of tables using findElements method
 3- using for loop get text of all elements
 4- using if else condition we will check specific date
 5- If date is matched then click and break the loop. 
 6- Handle NoSuchElementException in case of (31st day)
 
Handle Calendar/DatePicker using JavaScriptExecutor :

+Use JavaScriptExecutor to inject JavaScript into DatePicker/Calendar field. 
+Very Fast approach
+Direct injection of date into DOM - HTML
selenium can not change any HTML Dom structure but javascript can do

  public static void selectDateByJS(WebElement element, WebDriver driver,String dateValue)
	{
    	JavascriptExecutor js = ((JavascriptExecutor) driver);
    	js.executeScript("arguments[0].setAttribute('value','"+dateValue+"');", element);
    }
	

What is HTML DOM - Document Object Model? Why we get StaleElement Exception in Selenium.

• DOM is an API Interface provided by browser (kind of plateform and provided by specific browser)
• When a web page is loaded, browser creates a DOM of the page.
DOM is divided page wise
Although most of the DOM strycture will be same in all the browser but these are provided by specific browser


With the document object model, JavaScript gets all the power it needs to create dynamic HTML: 

• JavaScript can change all the HTML elements in the page
• JavaScript can change all the HTML attributes in the page
• JavaScript can change all the CSS styles in the page
• JavaScript can remove existing HTML elements and attributes
• JavaScript can add new HTML elements and attributes
• JavaScript can react to all existing HTML events in the page
• JavaScript can create new HTML events in the page

--------------------------------------------------------------------------------------------------------------------------------------------

Selenium Grid Architecture:
Selenium Grid has a Hub and Node Architecture.

The Hub:

The hub is the central point where you load your tests.
There should only be one hub in a grid.

The Nodes:

Nodes are the Selenium instances that will execute the tests that you loaded on the hub.

~~~ for HUB, use this command:

java -jar selenium-server-standalone-3.13.0.jar -role hub

~~~ for Node, use this command:

java -Dwebdriver.chrome.driver="./SeleniumPractice/Drivers/chromedriver.exe" -jar selenium-server-standalone-3.13.0.jar -role node -hub http://192.168.0.102:4444/grid/register

E:\SeleniumAndAPITestingWorkSpace\SeleniumPractice\Drivers\chromedriver.exe

control c - termination

----------------------------------------------------------------------------------------------------------------------------

Page Object Model-
1- It is design pattern in which will help you to maintain the code and code duplication, which is a crucial thing in Test automation.

2- You can store all locators and respective methods in the separate class and Call them from the test in which you have to use.So the benefit from this will be if any changes in Page then you do not have to modify the test simply modify the respective page and that all.

3- You can create a layer between your test script and application page, which you have to automate.

4- In other words, it will behave as Object repository where all locators are saved.

Selenium has built in class called PageFactory, which they mainly created for Page Object purpose, which allows you to store elements in cache lookup.

Extent report -ExtentReports is an open-source reporting library for test automation
 Advantages of using ExtentReport :

Open source reporting library.
Provide delightful good looking and responsive UI.
Gives dashboard for the entire test runs included in TestNG file.
Very easy to utilize API with less coding required.
Effortlessly coordinate test-runner logs.
It provides results in the form of PIE charts. Using Extent Reports we could generate custom logs, add snapshots. We could use external XML file to provide extra information.
We can provide below information to the report using XML file:

Report Title
Report Name
Report Headline
Environment Information
Host Name
User Name
Date Format
Time Format

----------------------------------------------------------------------------------------------------

