REST Assured is a Java library that provides a domain-specific language (DSL) for writing powerful, maintainable tests for RESTful APIs

RESTful APIs support two different types of parameters:

Query parameters: These are appended at the end of a RESTful API endpoint and can be identified by the question mark in front of them. For example, in the endpoint http://md5.jsontest.com/?text=test, "text" is a query parameter (with value "test").
Path parameters: These are part of the RESTful API endpoint. For example, in the endpoint we used earlier: http://ergast.com/api/f1/2017/circuits.json, "2017" is a path parameter value.

Often, APIs are secured using some sort of authentication mechanism. REST Assured supports basic, digest, form, and OAuth authentication.

Other interesting REST Assured features
Apart from those introduced above, REST Assured offers a number of other useful features that let you create even more powerful tests, such as:

The ability to (de-)serialize Plain Old Java Objects (POJOs). This allows you to serialize the properties and values associated with a Java object instance directly into a JSON or an XML document, which can then be sent to a RESTful API using the POST method. This also works the other way aroundâ€”a JSON or an XML response returned by an API can be deserialized into a POJO instance by REST Assured as well.
Logging requests and responses. This can be especially useful when you need to inspect API responses to create the appropriate checks, or when you want to make sure that the request you're sending to an API is correct. You can choose to log everything (parameters, headers, and body), only headers, only parameters, and much more.
REST Assured comes with a Spring Mock MVC module, allowing you to write tests for Spring controllers using the REST Assured syntax.

Pros

More flexibility with writing tests, as it is based on Java.
Is open source and free to use for everyone.
Can be used with any open source reporting tool.
Easy to integrate with JUnit and TestNG frameworks, for greater added functionality.
Supports Given/When/Then notation, making the code easier to read.
Supports multiple authentication methods, including OAuth1, OAuth2 and Form authentication.
Support for Proxy configuration.
Cons

Requires knowledge of the Java programming language
The user has to write code for every test case
Performance testing is not integrated in this tool
Not beginner friendly

Json object and Json array

Arrays in JSON are used to organize a collection of related items (Which could be JSON objects).
For example: [{"name":"item 1"},{"name": "item2} ]

On the other hand, you would use JSONObject when dealing with JSON that begins with curly braces. A JSON object is typically used to contain key/value pairs related to one item. For example: {"name": "item1", "description":"a JSON object"}

Of course, JSON arrays and objects may be nested inside one another. One common example of this is an API which returns a JSON object containing some metadata alongside an array of the items matching your query:

{"startIndex": 0, "data": [{"name":"item 1"},{"name": "item2"} ]}


handsake - interaction bw two system

when any company exposing their API'S so thats thier responsibility to maintain the documents

in SOAP - only XML type of request is possible, sometimes very heavy and it contains lotes of nodes
Rest- content type can be- JSON, xml, text, document, string
it is light weight
type of operation- CRUD
Authentication is very important (Auth key/Token, consumer key, username password, security questions)- otherwise anyone can hack and change the data's
when you are entering user username and password iin any site ,one Auth key/App id, Auth token in generated in backend and it is valid only for sometimes and than session expired(ex.- In financial transaction)
you might pass Authentication with url or with header
API is all about data(API docs)- and data are provided by the companies ex- google map
ex- UBER uses Google maps(google will provides data/docs)

we are taking care of data(we are care baout data is cimng or not)