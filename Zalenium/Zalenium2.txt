
Displaying the live preview
Go to http://localhost:4444/grid/admin/live 

You can replace localhost for the IP/machine name where Zalenium is running
Auto-refresh, add ?refresh=numberOfSeconds to refresh the view automatically. 

E.g. http://localhost:4444/grid/admin/live?refresh=20 will refresh the page every 20 seconds.
Showing the test name on the live preview
Having a name capability with the test name will display it in the live preview. See test name for more information.

Filtering tests by build name
If more than one person is using the same instance of Zalenium, with a build capability in your tests, the live preview can be filtered to show only the tests that belong to a specific build. Pass ?build=myTestBuild at the end of the url. E.g. http://localhost:4444/grid/admin/live?build=myTestBuild



Go to http://localhost:4444/grid/dashboard 

You can replace localhost for the IP/machine name where Zalenium is running
Check all the recorded videos and aggregated logs after your tests completed
Click on Cleanup to remove all videos and logs from the local drive and the dashboard 

Also cleanup the dashboard via http://localhost:4444/dashboard/cleanup?action=doCleanupAll



Test Configuration Options	

Test name- Adding a name capability with the test name will do two things; it will be displayed in the live preview to help you identify where your test is running, and the video file will also use it in the file name. Example code in Java for the capability:

    DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("name", "myTestName");
	
	
Build Name - Useful to filter the live preview and only display a group of tests belonging to the same build. Example code in Java for the capability:
 
	DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.CHROME);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("build", "myTestBuild");
	

Idle Timeout - By default, Zalenium allows a test to be idle up to 90 seconds. After that elapsed time, the session will be terminated, the node will be shutdown and the recorded video will be saved (if video recording is enabled). This prevents a test to run indefinitely after something went wrong. If you need to have a longer idle timeout, just set an idleTimeout capability in your test. Example code in Java for the capability (it sets the idleTimeout to 150 seconds):
  
	DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("idleTimeout", 150);


Screen Resolution - You can pass a custom screen resolution for your test, just include a screenResolution with the desired value. E.g. screenResolution=1280x1024. Also supported for the same purpose resolution and screen-resolution. Example code in Java for the capability screenResolution
   
	DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("screenResolution", "1280x720");


	
Disable Video Recording - It is possible to disable video recording (enabled by default) via test capabilities. Add a recordVideo=false capability and no video will be recorded. Example code in Java for the capability recordVideo
  
	DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("recordVideo", false);
	

Time Zone - Run your test in a different time zone from the default one Europe/Berlin, just pass a capability tz with the desired value. 
E.g. tz=America/MontrealExample code in Java for the capability tz.

    DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
    desiredCapabilities.setCapability(CapabilityType.PLATFORM_NAME, Platform.LINUX);
    desiredCapabilities.setCapability("tz", "America/Montreal");
	
	
Marking the test as passed or failed - By default, tests in Zalenium are marked in the dashboard either as COMPLETED (session finishes normally) or TIMEOUT (session was ended due to inactivity). You can mark the test as passed or failed based on the assertions you do on your side with your test framework, add a cookie from with the name zaleniumTestPassed with a value of true (if the test passes) or false (if the test fails). This could be done in the after method where you already know if the test passed or failed. Here is an example in Java:
   
	Cookie cookie = new Cookie("zaleniumTestPassed", "true");
    webDriver.manage().addCookie(cookie);	
	
	
	
Referencing test steps in the recorded video - It is possible to reference your tests steps in the recorded video by passing their description to Zalenium via a cookie. For example, your test could go to the home page, search and add an article to the basket, go to the checkout, and pay. All this steps can be referenced in the video for a more simple debugging. You can pass the steps via messages with a cookie named zaleniumMessage. Here is an example in Java:
   

	Cookie cookie = new Cookie("zaleniumMessage", "Go to home page");
    webDriver.manage().addCookie(cookie);
    webDriver.get("http://www.homepage.com");
    
    cookie = new Cookie("zaleniumMessage", "Search and add article to the basket");
    webDriver.manage().addCookie(cookie);
    /*
        Code performing WebDriver actions to search and add article to the basket.
     */
    
    cookie = new Cookie("zaleniumMessage", "Go to the checkout");
    webDriver.manage().addCookie(cookie);
    /*
        Code performing WebDriver actions to go to the checkout.
     */
    
    cookie = new Cookie("zaleniumMessage", "Pay");
    webDriver.manage().addCookie(cookie);
    /*
        Code performing WebDriver actions to pay.
     */
     
	
Set browser language (works only with Chrome) - You can set the browser language when using Google Chrome, just pass the ChromeOptions variable with the language argument. Example code in Java :
  
	DesiredCapabilities desiredCapabilities = DesiredCapabilities.chrome();
    ChromeOptions options = new ChromeOptions();
    options.addArguments("lang=en_GB");
    desiredCapabilities.setCapability(ChromeOptions.CAPABILITY, options);

	
	

	
	
Zalenium works conceptually in a simple way:

A Selenium Hub starts and listens on port 4444.
One custom node for docker-selenium
If a cloud testing integration is enabled, a cloud proxy node to support a cloud provider (Sauce Labs, BrowserStack, TestingBot) will register to the grid.
A test request is received by the hub and the requested capabilities are verified against each one of the nodes.
If docker-selenium can fulfill the requested capabilities, a docker container is created on the run, and the test request is sent back to the hub while the new node registers.
The hub acknowledges the new node and routes the test request with to it.
The test is executed and the container is disposed after test completion.
If docker-selenium cannot fulfill the requested capabilities, it will processed by one of the enabled cloud testing platforms.




Building and Testing
If you want to verify your changes locally with the existing tests (please double check that the Docker daemon is running):

Unit tests
    mvn clean test
Building the image
    mvn clean package
    cd target
    docker build -t zalenium:YOUR_TAG .
Running the image you just built
    docker run --rm -ti --name zalenium -p 4444:4444 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /tmp/videos:/home/seluser/videos \
        --privileged zalenium:YOUR_TAG start
Running the integration tests with Sauce Labs or BrowserStack or TestingBot. You will need an account on any of those providers to run them (they have free plans).
    ./run_integration_tests.sh sauceLabs|browserStack|testingBot
	
	
	
	
http://localhost:4444/grid/admin/live

http://localhost:4444/dashboard

http://localhost:4444/grid/console

http://localhost:4444/wd/hub

http://localhost:4444/wd/hub/status


You could grep the value using jq in a bash function like this:

    curl -sSL http://localhost:4444/wd/hub/status | jq .value.ready | grep true

	 # Pull docker-selenium
		docker pull elgalu/selenium

	 # Pull Zalenium
		docker pull dosel/zalenium
	  
	  
	   docker run --rm -ti --name zalenium -p 4444:4444 ^
    -v /var/run/docker.sock:/var/run/docker.sock ^
    -v /tmp/videos:/home/seluser/videos ^
    --privileged dosel/zalenium start
	  
	  
	   docker run --rm -ti --name zalenium -p 4444:4444 ^
      -v /var/run/docker.sock:/var/run/docker.sock ^
      -v /C/Users/Rahul/Desktop/DockerVideoRecording:/home/seluser/videos ^
      --privileged dosel/zalenium start  
	  
	  	   docker run --rm -ti --name zalenium -p 4444:4444 ^
      -v /var/run/docker.sock:/var/run/docker.sock ^
      -v /C/Users/Rahul/Desktop/DockerVideoRecording:/home/seluser/videos ^
      --privileged dosel/zalenium start --chromeContainers 3 --firefoxContainers 2
	  
	  
		  docker run --rm -ti --name zalenium1 -p 4444:4444 -p 5555:5555 ^
		-v /var/run/docker.sock:/var/run/docker.sock ^
		-v /tmp/videos:/home/seluser/videos ^
		dosel/zalenium start --chromeContainers 3 --firefoxContainers 2
		
		docker run --rm -ti --name zalenium1 -p 4444:4444 ^
		-v /var/run/docker.sock:/var/run/docker.sock ^
		-v /tmp/videos:/home/seluser/videos ^
		dosel/zalenium start --chromeContainers 3 --firefoxContainers 2
	  
	  
	  Why --privileged? We suggest you run Zalenium as --privileged to speed up the node registration process by increasing the entropy level with Haveged. Using --privileged is optional since it is just meant to improve its performance
	  