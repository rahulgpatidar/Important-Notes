
====================================================Jmeter========================================================

Jmeter -Java application - JDK should be installed to your system
Plateform independent

How to start on Window - jmeter.bat

Steps - Start Jmeter,Create a TestPlan,Create a Thread Group (Users),Add a Sampler (Http),Add Listeners,Run the Test

Test Plan - container which will contains all your tests, listeners, assertion etc
Workbench- keep your elements on temporary basis
when you will save test workbench will not be save , so for saving purpose keep all elements in test plan	

Rampup period- 20sec and users=10 mans every 2 second one user will add 
stop- forcefully stop
shutdown -  cleanly stop currently running threds than stop 


Assertions = checks on the Response

1. Response Assertion

2. Duration Assertion

3. Size Assertion

4. HTML Assertion

5. XML Assertion

6. XPATH Assertion


listener = elements that gather information about the performance test and used to view results / metrics of the test

latency = time to first byte

1. View Results in Table

2. View Results Tree

3. Aggregate Report

4. Graph Results

5. Summary Report

6. Simple Data Writer


1. Tools available for recording Jmeter ui test –

Badboy software (Windows)

Blazemeter – Chrome Plugin – (Windows and Mac)

2. Record a Test

3. Export as Jmeter (.jmx) Script

4. Open the script in Jmeter

5. Add listeners

6. Run and validate


Why to execute non-gui mode ?
-gui – consumes more resources / memory
-gui – not recommended for heavy load testing
-command line – can be integrated with other systems -Jenkins/CI …

Step 1
Goto command line – goto jmeter – bin

Step 2

Command :
jmeter -n -t (location of your jmeter test script) -l (location of the result file)

-n – non gui mode
-t – location of jmeter script
-l – location of result file

jmeter -h – to get help on jmeter commands

jmeter -? – to get information on jmeter command options

Step 1
Create Test Plan and save it (and close)

Step 2
Open command line and change dir to jmeter/bin

Step 3
Execute command:

to create report at the end of the test
—————————————————————
jmeter -n -t “location of the jmeter script” -l “location of result file”
-e -o “location of the output folder”

create report from a standalone csv file
——————————————————————
jmeter -g “location of csv file” -o “location of output folder”

Step 4
Analyse HTML (Dashboard) Reports


How to read data from csv file (Parameterisation)
 
Step 1
Add config element – CSV Data Set Config

Step 2
Add details in CSV Data Set Config

Step 3
Update value fields: ${variable_name}

Step 4
Run and validate



functions : any method that can populate a field in any other element of a test plan
syntax : ${__functionName}
${__functionName(var1, var2, …..)}

variable : container that can store a value which can be referenced by any other element within the thread. (local to a thread)
syntax : ${variableName}

function – caseSensitive | camelCasing  -  will use in place of HttpRequest

Functions:
—————
1. log – ${__log(“message”)}
2. time –
3. threadNum
4. intSum

Options – Jmeter Function Helper

What is a real-world performance test
————————————————————
Think Time – simulate actual user actions with timings/delays

Pacing – controlled ramp-up and down of virtual users
– control timing between iterations
– achieve x iterations in y mins/sec

Step 1 – Add Plugin – Stepping Thread Group
Step 2 – Setup load with required settings
Step 3 – Run and validate